trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  VITE_SUPABASE_URL: "https://mcpzbvznxmkbvaeajwua.supabase.co/"
  NEXT_PUBLIC_API_URL: "http://localhost:8000/"

stages:
  - stage: Frontend
    displayName: "Frontend Setup & Build"
    jobs:
      - job: frontend_build
        displayName: "Install & Build Frontend"
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '20.x'
            displayName: "Use Node.js 20"

          - script: |
              cd frontend
              npm ci
              npm install tailwindcss @tailwindcss/vite
              npm install -D @types/node
              npm install @supabase/supabase-js
              npm install -D vitest @testing-library/react @testing-library/jest-dom @testing-library/user-event jsdom
              npx shadcn@latest init
              npx shadcn@latest add navigation-menu
              npm run build
            displayName: "Install frontend dependencies and build"

          - script: |
              cd frontend
              npm run test
            displayName: "Run frontend tests"

          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: 'frontend/dist'
              artifactName: 'frontend_dist'
            displayName: "Publish Frontend Build"

  - stage: Backend
    displayName: "Backend Setup & Run"
    dependsOn: Frontend
    jobs:
      - job: backend_setup
        displayName: "Install & Run Backend"
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.11'
            displayName: "Use Python 3.11"

          - script: |
              cd backend
              python -m venv venv
              source venv/bin/activate
              python -m pip install --upgrade pip
              pip install supabase fastapi "uvicorn[standard]" httpx python-dotenv pytest pytest-mock
              pip install -r requirements.txt
            displayName: "Install backend dependencies"

          - script: |
              cd backend
              source .venv/bin/activate
              nohup uvicorn main:app --reload --port 8000 &
            displayName: "Run Backend API"

  - stage: Pipeline_Tests
    displayName: "Pipeline Tests"
    dependsOn: Backend
    jobs:
      - job: run_tests
        variables:
        - group: SupabaseSecrets
        displayName: "Run Tests"
        steps:
          #test_sanity
          - script: |
              echo "URL: $SUPABASE_URL"
              echo "Anon len: ${#SUPABASE_ANON_KEY}"
              echo "Service len: ${#SUPABASE_SERVICE_ROLE_KEY}"
              cd backend
              pip install -r requirements.txt
              pip install pytest pytest-asyncio httpx
              source .venv/bin/activate
              python -m pytest tests/test_sanity.py --maxfail=1 --disable-warnings -q
            displayName: "Sanity Test"    
            env:
              SUPABASE_URL: $(VITE_SUPABASE_URL)
              SUPABASE_SERVICE_KEY: $(SUPABASE_SERVICE_KEY)
              SUPABASE_ANON_KEY: $(SUPABASE_ANON_KEY)
            continueOnError: true

          #Test Friends
          - script: |
              cd backend
              pip install -r requirements.txt
              pip install pytest pytest-asyncio httpx
              pytest -v tests/test_group.py --junitxml=pytest-results.xml
            displayName: "Testing Group"
            env:
              SUPABASE_URL: $(SUPABASE_URL)
              SUPABASE_SERVICE_KEY: $(SUPABASE_SERVICE_KEY)
            continueOnError: true

          #test_favourites
          - script: |
              cd backend
              source .venv/bin/activate
              python -m pytest tests/test_favourites.py --maxfail=1 --disable-warnings -q
            displayName: "Testing Favourite Movies"    
            env:
              SUPABASE_URL: $(VITE_SUPABASE_URL)
              SUPABASE_SERVICE_KEY: $(SUPABASE_SERVICE_KEY)
              SUPABASE_ANON_KEY: $(SUPABASE_ANON_KEY)
          
          #test_privacy
          - script: |
              cd backend
              source .venv/bin/activate
              python -m pytest tests/test_privacy.py --maxfail=1 --disable-warnings -q
            displayName: "Testing Privacy"    
            env:
              SUPABASE_URL: $(VITE_SUPABASE_URL)
              SUPABASE_SERVICE_KEY: $(SUPABASE_SERVICE_KEY)
              SUPABASE_ANON_KEY: $(SUPABASE_ANON_KEY)
            continueOnError: true

          #test_tmdb
          - script: |
              cd backend
              source .venv/bin/activate
              python -m pytest tests/test_tmdb.py --maxfail=1 --disable-warnings -q
            displayName: "Testing TMDB"    
            env:
              SUPABASE_URL: $(VITE_SUPABASE_URL)
              SUPABASE_SERVICE_KEY: $(SUPABASE_SERVICE_KEY)
              SUPABASE_ANON_KEY: $(SUPABASE_ANON_KEY)
            continueOnError: true

          #test_ratings
          - script: |
              cd backend
              source .venv/bin/activate
              python -m pytest tests/test_ratings.py --maxfail=1 --disable-warnings -q
            displayName: "Testing Ratings"    
            env:
              SUPABASE_URL: $(VITE_SUPABASE_URL)
              SUPABASE_SERVICE_KEY: $(SUPABASE_SERVICE_KEY)
              SUPABASE_ANON_KEY: $(SUPABASE_ANON_KEY)
            continueOnError: true


          
          # ALL TESTS (use this after we show David)
          # - script: |
          #     cd backend
          #     source .venv/bin/activate
          #     python -m pytest tests --maxfail=1 --disable-warnings -q
          #   displayName: "All backend tests"    
          #   env:
          #     SUPABASE_URL: $(VITE_SUPABASE_URL)
          #     SUPABASE_SERVICE_KEY: $(SUPABASE_SERVICE_KEY)
          #     SUPABASE_ANON_KEY: $(SUPABASE_ANON_KEY)

          # - task: PublishTestResults@2
          #   inputs:
          #     testResultsFiles: '**/pytest-results.xml'
          #     testRunTitle: 'Backend Tests'
          #   condition: succeededOrFailed()
          #   displayName: "Publish Backend Test Results"
          
  - stage: Deploy
    displayName: "Deploy to Azure Web App (MovieLily)"
    dependsOn: Pipeline_Tests
    jobs:
      - deployment: deploy_to_azure
        displayName: "Zip and Deploy to Azure"
        environment: "production"
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadBuildArtifacts@0
                  displayName: "Download Frontend Build"
                  inputs:
                    buildType: 'current'
                    downloadType: 'single'
                    artifactName: 'frontend_dist'
                    downloadPath: '$(System.DefaultWorkingDirectory)/frontend_dist'

                - task: ArchiveFiles@2
                  displayName: "Archive app into zip"
                  inputs:
                    rootFolderOrFile: '$(System.DefaultWorkingDirectory)/frontend_dist'
                    includeRootFolder: false
                    archiveType: 'zip'
                    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
                    replaceExistingArchive: true

                - task: AzureWebApp@1
                  displayName: "Deploy to Azure Web App: MovieLily"
                  inputs:
                    azureSubscription: 'AzureAppConnection'
                    appName: 'MovieLily'
                    resourceGroupName: 'MoviesASD'
                    package: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'