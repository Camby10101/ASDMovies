trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  VITE_SUPABASE_URL: "https://mcpzbvznxmkbvaeajwua.supabase.co/"
  NEXT_PUBLIC_API_URL: "https://movielily.azurewebsites.net/"
  pythonVersion: '3.11'
  nodeVersion: '20.x'
  frontendDir: 'frontend'
  backendDir: 'backend'
  buildOutput: 'dist'
  buildDir: 'build_artifacts'

stages:
  - stage: Frontend
    displayName: "Frontend Setup & Build"
    jobs:
      - job: frontend_build
        displayName: "Install & Build Frontend"
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '20.x'
            displayName: "Use Node.js 20"

          - script: |
              cd frontend
              npm ci
              npm install tailwindcss @tailwindcss/vite
              npm install -D @types/node
              npm install @supabase/supabase-js
              npm install -D vitest @testing-library/react @testing-library/jest-dom @testing-library/user-event jsdom
              npm run build
            displayName: "Install frontend dependencies and build"

          - script: |
              cd frontend
              npm run test
            displayName: "Run frontend tests"

  - stage: Backend
    displayName: "Backend Setup & Run"
    dependsOn: Frontend
    jobs:
      - job: backend_setup
        displayName: "Install & Run Backend"
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.11'
            displayName: "Use Python 3.11"

          - script: |
              cd backend
              python -m venv venv
              source venv/bin/activate
              python -m pip install --upgrade pip
              pip install supabase fastapi "uvicorn[standard]" httpx python-dotenv pytest pytest-mock
              pip install -r requirements.txt
            displayName: "Install backend dependencies"

          - script: |
              cd backend
              source venv/bin/activate
              nohup uvicorn main:app --reload --port 8000 &
            displayName: "Run Backend API"

  - stage: Pipeline_Tests
    displayName: "Pipeline Tests"
    dependsOn: Backend
    jobs:
      - job: run_tests
        variables:
        - group: SupabaseSecrets
        displayName: "Run Tests"
        steps:
          # test_sanity
          - script: |
              echo "URL: $SUPABASE_URL"
              echo "Anon len: ${#SUPABASE_ANON_KEY}"
              echo "Service len: ${#SUPABASE_SERVICE_KEY}"
              cd backend
              source venv/bin/activate
              pip install -r requirements.txt
              pip install pytest pytest-asyncio httpx
              python -m pytest tests/test_sanity.py --maxfail=1 --disable-warnings -q
            displayName: "Sanity Test"    
            env:
              SUPABASE_URL: $(VITE_SUPABASE_URL)
              SUPABASE_SERVICE_KEY: $(SUPABASE_SERVICE_KEY)
              SUPABASE_ANON_KEY: $(SUPABASE_ANON_KEY)
            continueOnError: true

          # test_group
          - script: |
              cd backend
              source venv/bin/activate
              pip install -r requirements.txt
              pip install pytest pytest-asyncio httpx
              pytest -v tests/test_group.py --junitxml=pytest-results.xml
            displayName: "Testing Group"
            env:
              SUPABASE_URL: $(SUPABASE_URL)
              SUPABASE_SERVICE_KEY: $(SUPABASE_SERVICE_KEY)
            continueOnError: true

          # test_favourites
          - script: |
              cd backend
              source venv/bin/activate
              python -m pytest tests/test_favourites.py --maxfail=1 --disable-warnings -q
            displayName: "Testing Favourite Movies"    
            env:
              SUPABASE_URL: $(VITE_SUPABASE_URL)
              SUPABASE_SERVICE_KEY: $(SUPABASE_SERVICE_KEY)
              SUPABASE_ANON_KEY: $(SUPABASE_ANON_KEY)
            continueOnError: true

          # test_privacy
          - script: |
              cd backend
              source venv/bin/activate
              python -m pytest tests/test_privacy.py --maxfail=1 --disable-warnings -q
            displayName: "Testing Privacy"    
            env:
              SUPABASE_URL: $(VITE_SUPABASE_URL)
              SUPABASE_SERVICE_KEY: $(SUPABASE_SERVICE_KEY)
              SUPABASE_ANON_KEY: $(SUPABASE_ANON_KEY)
            continueOnError: true

          # test_tmdb
          - script: |
              cd backend
              source venv/bin/activate
              python -m pytest tests/test_tmdb.py --maxfail=1 --disable-warnings -q
            displayName: "Testing TMDB"    
            env:
              SUPABASE_URL: $(VITE_SUPABASE_URL)
              SUPABASE_SERVICE_KEY: $(SUPABASE_SERVICE_KEY)
              SUPABASE_ANON_KEY: $(SUPABASE_ANON_KEY)
            continueOnError: true

          # test_ratings
          - script: |
              cd backend
              source venv/bin/activate
              python -m pytest tests/test_ratings.py --maxfail=1 --disable-warnings -q
            displayName: "Testing Ratings"    
            env:
              SUPABASE_URL: $(VITE_SUPABASE_URL)
              SUPABASE_SERVICE_KEY: $(SUPABASE_SERVICE_KEY)
              SUPABASE_ANON_KEY: $(SUPABASE_ANON_KEY)
            continueOnError: true

  - stage: Build
    jobs:
      - job: Build
        steps:
          - checkout: self

          # Setup Node for frontend
          - task: UseNode@1
            inputs:
              version: $(nodeVersion)

          # Build frontend
          - script: |
                  cd $(frontendDir)
                  echo "Current directory: $(pwd)"
                  ls -l
                  npm run build
                  ls -l
          # cp -r dist ../backend/static
            displayName: 'Build React frontend with Vite'
            env:
              VITE_SUPABASE_URL: $(VITE_SUPABASE_URL)
              VITE_SUPABASE_ANON_KEY: $(VITE_SUPABASE_ANON_KEY)
              NEXT_PUBLIC_API_URL: $(NEXT_PUBLIC_API_URL)

          # Setup Python for backend
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'

          # Install backend dependencies
          - script: |
              cd $(backendDir)
              python -m pip install --upgrade pip
              pip install -r requirements.txt -t ./python_packages
            displayName: 'Install backend dependencies'

          # Combine backend and frontend output
          - script: |
              echo "Listing frontend build folder:"
              ls -l ./$(frontendDir)/$(buildOutput)
              mkdir -p $(buildDir)
              cp -r $(backendDir)/* $(buildDir)/
              cp -r $(backendDir)/python_packages $(buildDir)/
              mkdir -p $(buildDir)/static
              cp -r $(Build.SourcesDirectory)/frontend/dist/* $(buildDir)/static/
            # cp -r ./$(frontendDir)/$(buildOutput)/* $(buildDir)/static/
            displayName: 'Assemble build directory'

          # Publish artifact
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(buildDir)'
              ArtifactName: 'drop'
              publishLocation: 'Container'

  - stage: Deploy
    dependsOn: Build
    jobs:
      - deployment: DeployWebApp
        environment: 'production'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: drop

                - task: AzureWebApp@1
                  inputs:
                    azureSubscription: 'AzureAppConnection'
                    appName: 'MovieLily'
                    resourceGroupName: 'MoviesASD'
                    package: '$(Pipeline.Workspace)/drop'
                    runtimeStack: 'PYTHON|3.11'
                  env:
                    VITE_SUPABASE_URL: $(VITE_SUPABASE_URL)
                    NEXT_PUBLIC_API_URL: $(NEXT_PUBLIC_API_URL)
                    SUPABASE_SERVICE_KEY: $(SUPABASE_SERVICE_KEY)
                    SUPABASE_ANON_KEY: $(SUPABASE_ANON_KEY)  
