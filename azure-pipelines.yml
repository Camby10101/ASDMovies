trigger:
  branches:
    include:
      - main
      - dev

pool:
  vmImage: ubuntu-latest

variables:
  # Vars usadas no build do frontend (Vite)
  - name: VITE_SUPABASE_URL
    value: "https://mcpzbvznxmkbvaeajwua.supabase.co/"
  - name: NEXT_PUBLIC_API_URL
    value: "http://localhost:8000/"

stages:
  - stage: Frontend
    displayName: "Frontend Setup & Build"
    jobs:
      - job: frontend_build
        displayName: "Install & Build Frontend"
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '20.x'
            displayName: "Use Node.js 20"

          # (Opcional) cache do npm para builds mais rápidos
          - task: Cache@2
            displayName: "Cache npm"
            inputs:
              key: 'npm | "$(Agent.OS)" | frontend/package-lock.json'
              restoreKeys: |
                npm | "$(Agent.OS)"
              path: $(Pipeline.Workspace)/.npm

          - script: |
              set -e
              cd frontend
              export npm_config_cache=$(Pipeline.Workspace)/.npm
              if [ -f package-lock.json ]; then
                npm ci --no-audit --fund=false
              else
                npm install --no-audit --fund=false
              fi
              npm run build
            displayName: "Install frontend dependencies and build"
            env:
              VITE_SUPABASE_URL: $(VITE_SUPABASE_URL)
              NEXT_PUBLIC_API_URL: $(NEXT_PUBLIC_API_URL)

          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: 'frontend/dist'
              artifactName: 'frontend_dist'
            displayName: "Publish Frontend Build"

  - stage: Backend
    displayName: "Backend: Install & Test"
    dependsOn: Frontend
    jobs:
      - job: backend_tests
        displayName: "Install deps & run pytest"
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.11'
            displayName: "Use Python 3.11"

          - script: |
              set -e
              python -m venv .venv
              source .venv/bin/activate
              python -m pip install --upgrade pip
              if [ -f backend/requirements.txt ]; then
                pip install -r backend/requirements.txt
              else
                # deps mínimas p/ app + testes
                pip install fastapi "uvicorn[standard]" httpx python-dotenv supabase pytest pytest-cov anyio
              fi
            displayName: "Install backend dependencies"

          - script: |
              set -e
              source .venv/bin/activate
              cd backend
              # roda só os testes de privacidade (evita falhas não relacionadas ao TMDB)
              pytest -vv tests/test_privacy.py
            displayName: "Run backend tests"
            env:
              SUPABASE_URL: $(SUPABASE_URL)
              SUPABASE_SERVICE_ROLE_KEY: $(SUPABASE_SERVICE_ROLE_KEY)
              TEST_AUTH_USER_ID: $(TEST_AUTH_USER_ID)
